/*******************************************************************************
*						       磁盘操作外围函数                                *
********************************************************************************
*	Name : CB_Disk.cpp          Origian Place : BJ of China                    *
*	Create Data : 1998-2002     Now Version :   1.0                            *
*	Modify Time :               Translater : HeGong                            *
*==============================================================================*
*                        Modification History                                  *
*==============================================================================*
*         V1.0  1. Create this program.                                        *
*               2. 07/25/2005 fixed by Wangwei.                                *
*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include "../Include/pub.h"

#define NO_DISKIO

#ifdef NO_DISKIO

BOOL __thiscall CAntiVirEngine::_Read_25(DWORD disk, DWORD ssec, DWORD nsec, BYTE *buffer)
{
	return 0;
}

BOOL	__thiscall	CAntiVirEngine::_Write_26(DWORD disk, DWORD ssec, DWORD nsec, BYTE *buffer)
{
	return 0;
}

BOOL	__thiscall	CAntiVirEngine::_Write_13(DWORD disk, DWORD cx, DWORD dh, DWORD al, BYTE *buffer)
{
	return 0;
}
BOOL	__thiscall	CAntiVirEngine::_Read_13(DWORD disk, DWORD cx, DWORD dh, DWORD al, BYTE *buffer)
{
	return 0;

}
// BYTE*	__thiscall	CAntiVirEngine::Get_Sector_Image(DWORD type);

#else



#ifndef WINCE
	#include "dos.h"
#endif

// 引导区数据
BYTE MbrNew[512] = {	// for big disk over 8G
	0x33, 0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x7c, 0xfb, 0x50, 0x07, 0x50, 0x1f, 0xfc, 0xbe, 0x1b, 0x7c, 
	0xbf, 0x1b, 0x06, 0x50, 0x57, 0xb9, 0xe5, 0x01, 0xf3, 0xa4, 0xcb, 0xbe, 0xbe, 0x07, 0xb1, 0x04, 
	0x38, 0x2c, 0x7c, 0x09, 0x75, 0x15, 0x83, 0xc6, 0x10, 0xe2, 0xf5, 0xcd, 0x18, 0x8b, 0x14, 0x8b, 
	0xee, 0x83, 0xc6, 0x10, 0x49, 0x74, 0x16, 0x38, 0x2c, 0x74, 0xf6, 0xbe, 0x10, 0x07, 0x4e, 0xac, 
	0x3c, 0x00, 0x74, 0xfa, 0xbb, 0x07, 0x00, 0xb4, 0x0e, 0xcd, 0x10, 0xeb, 0xf2, 0x89, 0x46, 0x25, 
	0x96, 0x8a, 0x46, 0x04, 0xb4, 0x06, 0x3c, 0x0e, 0x74, 0x11, 0xb4, 0x0b, 0x3c, 0x0c, 0x74, 0x05, 
	0x3a, 0xc4, 0x75, 0x2b, 0x40, 0xc6, 0x46, 0x25, 0x06, 0x75, 0x24, 0xbb, 0xaa, 0x55, 0x50, 0xb4, 
	0x41, 0xcd, 0x13, 0x58, 0x72, 0x16, 0x81, 0xfb, 0x55, 0xaa, 0x75, 0x10, 0xf6, 0xc1, 0x01, 0x74, 
	0x0b, 0x8a, 0xe0, 0x88, 0x56, 0x24, 0xc7, 0x06, 0xa1, 0x06, 0xeb, 0x1e, 0x88, 0x66, 0x04, 0xbf, 
	0x0a, 0x00, 0xb8, 0x01, 0x02, 0x8b, 0xdc, 0x33, 0xc9, 0x83, 0xff, 0x05, 0x7f, 0x03, 0x8b, 0x4e, 
	0x25, 0x03, 0x4e, 0x02, 0xcd, 0x13, 0x72, 0x29, 0xbe, 0x46, 0x07, 0x81, 0x3e, 0xfe, 0x7d, 0x55, 
	0xaa, 0x74, 0x5a, 0x83, 0xef, 0x05, 0x7f, 0xda, 0x85, 0xf6, 0x75, 0x83, 0xbe, 0x27, 0x07, 0xeb, 
	0x8a, 0x98, 0x91, 0x52, 0x99, 0x03, 0x46, 0x08, 0x13, 0x56, 0x0a, 0xe8, 0x12, 0x00, 0x5a, 0xeb, 
	0xd5, 0x4f, 0x74, 0xe4, 0x33, 0xc0, 0xcd, 0x13, 0xeb, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x56, 0x33, 0xf6, 0x56, 0x56, 0x52, 0x50, 0x06, 0x53, 0x51, 0xbe, 0x10, 0x00, 0x56, 0x8b, 0xf4, 
	0x50, 0x52, 0xb8, 0x00, 0x42, 0x8a, 0x56, 0x24, 0xcd, 0x13, 0x5a, 0x58, 0x8d, 0x64, 0x10, 0x72, 
	0x0a, 0x40, 0x75, 0x01, 0x42, 0x80, 0xc7, 0x02, 0xe2, 0xf7, 0xf8, 0x5e, 0xc3, 0xeb, 0x74, 0x49, 
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 
	0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x61, 
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x00, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70, 
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x8b, 0xfc, 0x1e, 0x57, 0x8b, 0xf5, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
};

BYTE Mbr[512] = {
	0xfa, 0x2b, 0xc0, 0x8e, 0xd0, 0x8e, 0xc0, 0x8e, 0xd8, 0xb8, 0x00, 0x7c, 0x8b, 0xe0, 0xfb, 0x8b, 
	0xf0, 0xbf, 0x00, 0x7e, 0xfc, 0xb9, 0x00, 0x01, 0xf3, 0xa5, 0xe9, 0x00, 0x02, 0xb9, 0x10, 0x00, 
	0x8b, 0x36, 0x85, 0x7e, 0xf6, 0x04, 0x80, 0x75, 0x08, 0x83, 0xee, 0x10, 0xe2, 0xf6, 0xeb, 0x37, 
	0x90, 0xbf, 0xbe, 0x07, 0x57, 0xb9, 0x08, 0x00, 0xf3, 0xa5, 0x5e, 0xbb, 0x00, 0x7c, 0x8b, 0x14, 
	0x8b, 0x4c, 0x02, 0xbd, 0x05, 0x00, 0xb8, 0x01, 0x02, 0xcd, 0x13, 0x73, 0x09, 0x2b, 0xc0, 0xcd, 
	0x13, 0x4d, 0x74, 0x19, 0xeb, 0xf0, 0xbe, 0xfe, 0x7d, 0xad, 0x3d, 0x55, 0xaa, 0x75, 0x14, 0xbe, 
	0xbe, 0x07, 0xea, 0x00, 0x7c, 0x00, 0x00, 0x8b, 0x36, 0x87, 0x7e, 0xeb, 0x0a, 0x8b, 0x36, 0x89, 
	0x7e, 0xeb, 0x04, 0x8b, 0x36, 0x8b, 0x7e, 0xac, 0x0a, 0xc0, 0x74, 0xfe, 0xbb, 0x07, 0x00, 0xb4, 
	0x0e, 0xcd, 0x10, 0xeb, 0xf2, 0xee, 0x7f, 0x8d, 0x7e, 0xa7, 0x7e, 0xc8, 0x7e, 0x0d, 0x0a, 0x49, 
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 
	0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x0d, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x4c, 
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 
	0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x00, 0x0d, 0x0a, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 
	0x67, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x79, 0x73, 0x74, 
	0x65, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
};

BYTE Boot_NT[512] = {
	0xeb, 0x3c, 0x90, 0x4d, 0x53, 0x44, 0x4f, 0x53, 0x35, 0x2e, 0x30, 0x00, 0x02, 0x01, 0x01, 0x00, 
	0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00, 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0xfb, 0xeb, 0x4c, 0x34, 0x4e, 0x4f, 0x20, 0x4e, 0x41, 
	0x4d, 0x45, 0x20, 0x20, 0x20, 0x20, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x33, 0xc9, 
	0x8e, 0xd1, 0xbc, 0xf0, 0x7b, 0x8e, 0xd9, 0xb8, 0x00, 0x20, 0x8e, 0xc0, 0xfc, 0xbd, 0x00, 0x7c, 
	0x38, 0x4e, 0x24, 0x7d, 0x24, 0x8b, 0xc1, 0x99, 0xe8, 0x3c, 0x01, 0x72, 0x1c, 0x83, 0xeb, 0x3a, 
	0x66, 0xa1, 0x1c, 0x7c, 0x26, 0x66, 0x3b, 0x07, 0x26, 0x8a, 0x57, 0xfc, 0x75, 0x06, 0x80, 0xca, 
	0x02, 0x88, 0x56, 0x02, 0x80, 0xc3, 0x10, 0x73, 0xeb, 0x33, 0xc9, 0x8a, 0x46, 0x10, 0x98, 0xf7, 
	0x66, 0x16, 0x03, 0x46, 0x1c, 0x13, 0x56, 0x1e, 0x03, 0x46, 0x0e, 0x13, 0xd1, 0x8b, 0x76, 0x11, 
	0x60, 0x89, 0x46, 0xfc, 0x89, 0x56, 0xfe, 0xb8, 0x20, 0x00, 0xf7, 0xe6, 0x8b, 0x5e, 0x0b, 0x03, 
	0xc3, 0x48, 0xf7, 0xf3, 0x01, 0x46, 0xfc, 0x11, 0x4e, 0xfe, 0x61, 0xbf, 0x00, 0x00, 0xe8, 0xe6, 
	0x00, 0x72, 0x39, 0x26, 0x38, 0x2d, 0x74, 0x17, 0x60, 0xb1, 0x0b, 0xbe, 0xa1, 0x7d, 0xf3, 0xa6, 
	0x61, 0x74, 0x32, 0x4e, 0x74, 0x09, 0x83, 0xc7, 0x20, 0x3b, 0xfb, 0x72, 0xe6, 0xeb, 0xdc, 0xa0, 
	0xfb, 0x7d, 0xb4, 0x7d, 0x8b, 0xf0, 0xac, 0x98, 0x40, 0x74, 0x0c, 0x48, 0x74, 0x13, 0xb4, 0x0e, 
	0xbb, 0x07, 0x00, 0xcd, 0x10, 0xeb, 0xef, 0xa0, 0xfd, 0x7d, 0xeb, 0xe6, 0xa0, 0xfc, 0x7d, 0xeb, 
	0xe1, 0xcd, 0x16, 0xcd, 0x19, 0x26, 0x8b, 0x55, 0x1a, 0x52, 0xb0, 0x01, 0xbb, 0x00, 0x00, 0xe8, 
	0x3b, 0x00, 0x72, 0xe8, 0x5b, 0x8a, 0x56, 0x24, 0xbe, 0x0b, 0x7c, 0x8b, 0xfc, 0xc7, 0x46, 0xf0, 
	0x3d, 0x7d, 0xc7, 0x46, 0xf4, 0x29, 0x7d, 0x8c, 0xd9, 0x89, 0x4e, 0xf2, 0x89, 0x4e, 0xf6, 0xc6, 
	0x06, 0x96, 0x7d, 0xcb, 0xea, 0x03, 0x00, 0x00, 0x20, 0x0f, 0xb6, 0xc8, 0x66, 0x8b, 0x46, 0xf8, 
	0x66, 0x03, 0x46, 0x1c, 0x66, 0x8b, 0xd0, 0x66, 0xc1, 0xea, 0x10, 0xeb, 0x5e, 0x0f, 0xb6, 0xc8, 
	0x4a, 0x4a, 0x8a, 0x46, 0x0d, 0x32, 0xe4, 0xf7, 0xe2, 0x03, 0x46, 0xfc, 0x13, 0x56, 0xfe, 0xeb, 
	0x4a, 0x52, 0x50, 0x06, 0x53, 0x6a, 0x01, 0x6a, 0x10, 0x91, 0x8b, 0x46, 0x18, 0x96, 0x92, 0x33, 
	0xd2, 0xf7, 0xf6, 0x91, 0xf7, 0xf6, 0x42, 0x87, 0xca, 0xf7, 0x76, 0x1a, 0x8a, 0xf2, 0x8a, 0xe8, 
	0xc0, 0xcc, 0x02, 0x0a, 0xcc, 0xb8, 0x01, 0x02, 0x80, 0x7e, 0x02, 0x0e, 0x75, 0x04, 0xb4, 0x42, 
	0x8b, 0xf4, 0x8a, 0x56, 0x24, 0xcd, 0x13, 0x61, 0x61, 0x72, 0x0b, 0x40, 0x75, 0x01, 0x42, 0x03, 
	0x5e, 0x0b, 0x49, 0x75, 0x06, 0xf8, 0xc3, 0x41, 0xbb, 0x00, 0x00, 0x60, 0x66, 0x6a, 0x00, 0xeb, 
	0xb0, 0x4e, 0x54, 0x4c, 0x44, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0d, 0x0a, 0x52, 0x65, 
	0x6d, 0x6f, 0x76, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x74, 
	0x68, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0xff, 0x0d, 0x0a, 0x44, 0x69, 0x73, 
	0x6b, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xff, 0x0d, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 
	0x61, 0x6e, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 
	0x72, 0x74, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0xcb, 0xd8, 0x55, 0xaa, 
};

BYTE Boot_Win4[512] = {	// WINBOOT.SYS
	0xeb, 0x3e, 0x90, 0x4d, 0x53, 0x57, 0x49, 0x4e, 0x34, 0x2e, 0x30, 0x00, 0x02, 0x01, 0x01, 0x00, 
	0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00, 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0d, 0x19, 0x57, 0x38, 0x4e, 0x4f, 0x20, 0x4e, 0x41, 
	0x4d, 0x45, 0x20, 0x20, 0x20, 0x20, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0xf1, 0x7d, 
	0xfa, 0x33, 0xc9, 0x8e, 0xd1, 0xbc, 0xfc, 0x7b, 0x16, 0x07, 0xbd, 0x78, 0x00, 0xc5, 0x76, 0x00, 
	0x1e, 0x56, 0x16, 0x55, 0xbf, 0x22, 0x05, 0x89, 0x7e, 0x00, 0x89, 0x4e, 0x02, 0xb1, 0x0b, 0xfc, 
	0xf3, 0xa4, 0x06, 0x1f, 0xbd, 0x00, 0x7c, 0xc6, 0x45, 0xfe, 0x0f, 0x8b, 0x46, 0x18, 0x88, 0x45, 
	0xf9, 0xfb, 0x38, 0x66, 0x24, 0x7c, 0x04, 0xcd, 0x13, 0x72, 0x3c, 0x8a, 0x46, 0x10, 0x98, 0xf7, 
	0x66, 0x16, 0x03, 0x46, 0x1c, 0x13, 0x56, 0x1e, 0x03, 0x46, 0x0e, 0x13, 0xd1, 0x50, 0x52, 0x89, 
	0x46, 0xfc, 0x89, 0x56, 0xfe, 0xb8, 0x20, 0x00, 0x8b, 0x76, 0x11, 0xf7, 0xe6, 0x8b, 0x5e, 0x0b, 
	0x03, 0xc3, 0x48, 0xf7, 0xf3, 0x01, 0x46, 0xfc, 0x11, 0x4e, 0xfe, 0x5a, 0x58, 0xbb, 0x00, 0x07, 
	0x8b, 0xfb, 0xb1, 0x01, 0xe8, 0x94, 0x00, 0x72, 0x47, 0x38, 0x2d, 0x74, 0x19, 0xb1, 0x0b, 0x56, 
	0x8b, 0x76, 0x3e, 0xf3, 0xa6, 0x5e, 0x74, 0x4a, 0x4e, 0x74, 0x0b, 0x03, 0xf9, 0x83, 0xc7, 0x15, 
	0x3b, 0xfb, 0x72, 0xe5, 0xeb, 0xd7, 0x2b, 0xc9, 0xb8, 0xd8, 0x7d, 0x87, 0x46, 0x3e, 0x3c, 0xd8, 
	0x75, 0x99, 0xbe, 0x80, 0x7d, 0xac, 0x98, 0x03, 0xf0, 0xac, 0x84, 0xc0, 0x74, 0x17, 0x3c, 0xff, 
	0x74, 0x09, 0xb4, 0x0e, 0xbb, 0x07, 0x00, 0xcd, 0x10, 0xeb, 0xee, 0xbe, 0x83, 0x7d, 0xeb, 0xe5, 
	0xbe, 0x81, 0x7d, 0xeb, 0xe0, 0x33, 0xc0, 0xcd, 0x16, 0x5e, 0x1f, 0x8f, 0x04, 0x8f, 0x44, 0x02, 
	0xcd, 0x19, 0xbe, 0x82, 0x7d, 0x8b, 0x7d, 0x0f, 0x83, 0xff, 0x02, 0x72, 0xc8, 0x8b, 0xc7, 0x48, 
	0x48, 0x8a, 0x4e, 0x0d, 0xf7, 0xe1, 0x03, 0x46, 0xfc, 0x13, 0x56, 0xfe, 0xbb, 0x00, 0x07, 0x53, 
	0xb1, 0x04, 0xe8, 0x16, 0x00, 0x5b, 0x72, 0xc8, 0x81, 0x3f, 0x4d, 0x5a, 0x75, 0xa7, 0x81, 0xbf, 
	0x00, 0x02, 0x42, 0x4a, 0x75, 0x9f, 0xea, 0x00, 0x02, 0x70, 0x00, 0x50, 0x52, 0x51, 0x91, 0x92, 
	0x33, 0xd2, 0xf7, 0x76, 0x18, 0x91, 0xf7, 0x76, 0x18, 0x42, 0x87, 0xca, 0xf7, 0x76, 0x1a, 0x8a, 
	0xf2, 0x8a, 0x56, 0x24, 0x8a, 0xe8, 0xd0, 0xcc, 0xd0, 0xcc, 0x0a, 0xcc, 0xb8, 0x01, 0x02, 0xcd, 
	0x13, 0x59, 0x5a, 0x58, 0x72, 0x09, 0x40, 0x75, 0x01, 0x42, 0x03, 0x5e, 0x0b, 0xe2, 0xcc, 0xc3, 
	0x03, 0x18, 0x01, 0x27, 0x0d, 0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x79, 
	0x73, 0x74, 0x65, 0x6d, 0x20, 0x64, 0x69, 0x73, 0x6b, 0xff, 0x0d, 0x0a, 0x44, 0x69, 0x73, 0x6b, 
	0x20, 0x49, 0x2f, 0x4f, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xff, 0x0d, 0x0a, 0x52, 0x65, 0x70, 
	0x6c, 0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x2c, 0x20, 0x61, 
	0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 
	0x79, 0x20, 0x6b, 0x65, 0x79, 0x0d, 0x0a, 0x00, 0x49, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
	0x53, 0x59, 0x53, 0x4d, 0x53, 0x44, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x80, 0x01, 
	0x00, 0x57, 0x49, 0x4e, 0x42, 0x4f, 0x4f, 0x54, 0x20, 0x53, 0x59, 0x53, 0x00, 0x00, 0x55, 0xaa, 
};

BYTE Boot_DOS5[512] = { // MSDOS 5.0 ~ MSDOS 6.0
	0xeb, 0x3c, 0x90, 0x4d, 0x53, 0x44, 0x4f, 0x53, 0x35, 0x2e, 0x30, 0x00, 0x02, 0x01, 0x01, 0x00, 
	0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00, 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x05, 0x19, 0x10, 0x34, 0x4e, 0x4f, 0x20, 0x4e, 0x41, 
	0x4d, 0x45, 0x20, 0x20, 0x20, 0x20, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0xfa, 0x33, 
	0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x7c, 0x16, 0x07, 0xbb, 0x78, 0x00, 0x36, 0xc5, 0x37, 0x1e, 0x56, 
	0x16, 0x53, 0xbf, 0x3e, 0x7c, 0xb9, 0x0b, 0x00, 0xfc, 0xf3, 0xa4, 0x06, 0x1f, 0xc6, 0x45, 0xfe, 
	0x0f, 0x8b, 0x0e, 0x18, 0x7c, 0x88, 0x4d, 0xf9, 0x89, 0x47, 0x02, 0xc7, 0x07, 0x3e, 0x7c, 0xfb, 
	0xcd, 0x13, 0x72, 0x79, 0x33, 0xc0, 0x39, 0x06, 0x13, 0x7c, 0x74, 0x08, 0x8b, 0x0e, 0x13, 0x7c, 
	0x89, 0x0e, 0x20, 0x7c, 0xa0, 0x10, 0x7c, 0xf7, 0x26, 0x16, 0x7c, 0x03, 0x06, 0x1c, 0x7c, 0x13, 
	0x16, 0x1e, 0x7c, 0x03, 0x06, 0x0e, 0x7c, 0x83, 0xd2, 0x00, 0xa3, 0x50, 0x7c, 0x89, 0x16, 0x52, 
	0x7c, 0xa3, 0x49, 0x7c, 0x89, 0x16, 0x4b, 0x7c, 0xb8, 0x20, 0x00, 0xf7, 0x26, 0x11, 0x7c, 0x8b, 
	0x1e, 0x0b, 0x7c, 0x03, 0xc3, 0x48, 0xf7, 0xf3, 0x01, 0x06, 0x49, 0x7c, 0x83, 0x16, 0x4b, 0x7c, 
	0x00, 0xbb, 0x00, 0x05, 0x8b, 0x16, 0x52, 0x7c, 0xa1, 0x50, 0x7c, 0xe8, 0x92, 0x00, 0x72, 0x1d, 
	0xb0, 0x01, 0xe8, 0xac, 0x00, 0x72, 0x16, 0x8b, 0xfb, 0xb9, 0x0b, 0x00, 0xbe, 0xe6, 0x7d, 0xf3, 
	0xa6, 0x75, 0x0a, 0x8d, 0x7f, 0x20, 0xb9, 0x0b, 0x00, 0xf3, 0xa6, 0x74, 0x18, 0xbe, 0x9e, 0x7d, 
	0xe8, 0x5f, 0x00, 0x33, 0xc0, 0xcd, 0x16, 0x5e, 0x1f, 0x8f, 0x04, 0x8f, 0x44, 0x02, 0xcd, 0x19, 
	0x58, 0x58, 0x58, 0xeb, 0xe8, 0x8b, 0x47, 0x1a, 0x48, 0x48, 0x8a, 0x1e, 0x0d, 0x7c, 0x32, 0xff, 
	0xf7, 0xe3, 0x03, 0x06, 0x49, 0x7c, 0x13, 0x16, 0x4b, 0x7c, 0xbb, 0x00, 0x07, 0xb9, 0x03, 0x00, 
	0x50, 0x52, 0x51, 0xe8, 0x3a, 0x00, 0x72, 0xd8, 0xb0, 0x01, 0xe8, 0x54, 0x00, 0x59, 0x5a, 0x58, 
	0x72, 0xbb, 0x05, 0x01, 0x00, 0x83, 0xd2, 0x00, 0x03, 0x1e, 0x0b, 0x7c, 0xe2, 0xe2, 0x8a, 0x2e, 
	0x15, 0x7c, 0x8a, 0x16, 0x24, 0x7c, 0x8b, 0x1e, 0x49, 0x7c, 0xa1, 0x4b, 0x7c, 0xea, 0x00, 0x00, 
	0x70, 0x00, 0xac, 0x0a, 0xc0, 0x74, 0x29, 0xb4, 0x0e, 0xbb, 0x07, 0x00, 0xcd, 0x10, 0xeb, 0xf2, 
	0x3b, 0x16, 0x18, 0x7c, 0x73, 0x19, 0xf7, 0x36, 0x18, 0x7c, 0xfe, 0xc2, 0x88, 0x16, 0x4f, 0x7c, 
	0x33, 0xd2, 0xf7, 0x36, 0x1a, 0x7c, 0x88, 0x16, 0x25, 0x7c, 0xa3, 0x4d, 0x7c, 0xf8, 0xc3, 0xf9, 
	0xc3, 0xb4, 0x02, 0x8b, 0x16, 0x4d, 0x7c, 0xb1, 0x06, 0xd2, 0xe6, 0x0a, 0x36, 0x4f, 0x7c, 0x8b, 
	0xca, 0x86, 0xe9, 0x8a, 0x16, 0x24, 0x7c, 0x8a, 0x36, 0x25, 0x7c, 0xcd, 0x13, 0xc3, 0x0d, 0x0a, 
	0x4e, 0x6f, 0x6e, 0x2d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x20, 
	0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x0d, 0x0a, 0x52, 
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x65, 0x73, 0x73, 
	0x20, 0x61, 0x6e, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 
	0x61, 0x64, 0x79, 0x0d, 0x0a, 0x00, 0x49, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x59, 
	0x53, 0x4d, 0x53, 0x44, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x00, 0x00, 0x55, 0xaa, 
};

BYTE Boot_DOS3[512] = {
	0xeb, 0x34, 0x90, 0x4b, 0x56, 0x42, 0x4f, 0x4f, 0x54, 0x33, 0x30, 0x00, 0x02, 0x01, 0x01, 0x00,
	0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00, 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xfa, 0x33, 0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x7c, 0x16, 0x07,
	0xbb, 0x78, 0x00, 0x36, 0xc5, 0x37, 0x1e, 0x56, 0x16, 0x53, 0xbf, 0x2b, 0x7c, 0xb9, 0x0b, 0x00,
	0xfc, 0xac, 0x26, 0x80, 0x3d, 0x00, 0x74, 0x03, 0x26, 0x8a, 0x05, 0xaa, 0x8a, 0xc4, 0xe2, 0xf1,
	0x06, 0x1f, 0x89, 0x47, 0x02, 0xc7, 0x07, 0x2b, 0x7c, 0xfb, 0x8a, 0x16, 0xfd, 0x7d, 0xcd, 0x13,
	0x73, 0x03, 0xe9, 0x80, 0x00, 0xf6, 0x06, 0x24, 0x7c, 0x20, 0x74, 0x05, 0xc6, 0x06, 0x90, 0x04,
	0x54, 0xa0, 0x10, 0x7c, 0x98, 0xf7, 0x26, 0x16, 0x7c, 0x03, 0x06, 0x0e, 0x7c, 0xa3, 0x3f, 0x7c,
	0xa3, 0x37, 0x7c, 0xb8, 0x20, 0x00, 0xf7, 0x26, 0x11, 0x7c, 0x8b, 0x1e, 0x0b, 0x7c, 0x03, 0xc3,
	0x48, 0xf7, 0xf3, 0x03, 0x06, 0x37, 0x7c, 0xa3, 0x3d, 0x7c, 0xe8, 0xcb, 0x00, 0xa3, 0x37, 0x7c,
	0xa1, 0x3f, 0x7c, 0xe8, 0xc2, 0x00, 0xa3, 0x3f, 0x7c, 0xbb, 0x00, 0x05, 0xa1, 0x3f, 0x7c, 0xe8,
	0x73, 0x00, 0xb0, 0x01, 0xe8, 0x88, 0x00, 0x72, 0x19, 0x8b, 0xfb, 0xb9, 0x0b, 0x00, 0xbe, 0xe0,
	0x7d, 0xf3, 0xa6, 0x75, 0x0d, 0x8d, 0x7f, 0x20, 0xbe, 0xeb, 0x7d, 0xb9, 0x0b, 0x00, 0xf3, 0xa6,
	0x74, 0x18, 0xbe, 0x87, 0x7d, 0xe8, 0x40, 0x00, 0x32, 0xe4, 0xcd, 0x16, 0x5e, 0x1f, 0x8f, 0x04,
	0x8f, 0x44, 0x02, 0xcd, 0x19, 0xbe, 0xcf, 0x7d, 0xeb, 0xeb, 0xb9, 0x02, 0x00, 0xbb, 0x00, 0x07,
	0xa1, 0x37, 0x7c, 0xe8, 0x2f, 0x00, 0xb0, 0x01, 0xe8, 0x44, 0x00, 0x72, 0xe8, 0xff, 0x06, 0x37,
	0x7c, 0x81, 0xc3, 0x00, 0x02, 0xe2, 0xe9, 0x8a, 0x2e, 0x15, 0x7c, 0x8a, 0x16, 0xfd, 0x7d, 0x8b,
	0x1e, 0x3d, 0x7c, 0xea, 0x00, 0x00, 0x70, 0x00, 0xac, 0x0a, 0xc0, 0x74, 0x21, 0xb4, 0x0e, 0xb3,
	0xff, 0xcd, 0x10, 0xeb, 0xf3, 0x33, 0xd2, 0xf7, 0x36, 0x18, 0x7c, 0xfe, 0xc2, 0x88, 0x16, 0x3b,
	0x7c, 0x33, 0xd2, 0xf7, 0x36, 0x1a, 0x7c, 0x88, 0x16, 0x2a, 0x7c, 0xa3, 0x39, 0x7c, 0xc3, 0x51,
	0xb4, 0x02, 0x8b, 0x16, 0x39, 0x7c, 0x03, 0x16, 0x1e, 0x7c, 0x8a, 0xea, 0xd0, 0xce, 0xd0, 0xce,
	0x80, 0xe6, 0xc0, 0x8a, 0x0e, 0x3b, 0x7c, 0x80, 0xe1, 0x3f, 0x0a, 0xce, 0x8a, 0x36, 0x2a, 0x7c,
	0x8a, 0x16, 0xfd, 0x7d, 0xcd, 0x13, 0x59, 0xc3, 0x8b, 0x16, 0x0b, 0x7c, 0xb1, 0x09, 0xd3, 0xea,
	0xf7, 0xe2, 0x03, 0x06, 0x1c, 0x7c, 0xc3, 0x0d, 0x0a, 0x4e, 0x6f, 0x6e, 0x2d, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x6b,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x0d, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6b, 0x65,
	0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x0d, 0x0a, 0x00, 0x0d,
	0x0a, 0x42, 0x6f, 0x6f, 0x74, 0x20, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x0d, 0x0a, 0x00,
	0x49, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4d, 0x53, 0x44, 0x4f, 0x53,
	0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa,
};

BYTE Boot_Win41[512]={
	0xeb, 0x3c, 0x90, 0x4d, 0x53, 0x57, 0x49, 0x4e, 0x34, 0x2e, 0x31, 0x00, 0x02, 0x01, 0x01, 0x00,
	0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00, 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0xd7, 0x11, 0x62, 0x40, 0x4e, 0x4f, 0x20, 0x4e, 0x41,
	0x4d, 0x45, 0x20, 0x20, 0x20, 0x20, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x33, 0xc9,
	0x8e, 0xd1, 0xbc, 0xfc, 0x7b, 0x16, 0x07, 0xbd, 0x78, 0x00, 0xc5, 0x76, 0x00, 0x1e, 0x56, 0x16,
	0x55, 0xbf, 0x22, 0x05, 0x89, 0x7e, 0x00, 0x89, 0x4e, 0x02, 0xb1, 0x0b, 0xfc, 0xf3, 0xa4, 0x06,
	0x1f, 0xbd, 0x00, 0x7c, 0xc6, 0x45, 0xfe, 0x0f, 0x38, 0x4e, 0x24, 0x7d, 0x20, 0x8b, 0xc1, 0x99,
	0xe8, 0x7e, 0x01, 0x83, 0xeb, 0x3a, 0x66, 0xa1, 0x1c, 0x7c, 0x66, 0x3b, 0x07, 0x8a, 0x57, 0xfc,
	0x75, 0x06, 0x80, 0xca, 0x02, 0x88, 0x56, 0x02, 0x80, 0xc3, 0x10, 0x73, 0xed, 0x33, 0xc9, 0xfe,
	0x06, 0xd8, 0x7d, 0x8a, 0x46, 0x10, 0x98, 0xf7, 0x66, 0x16, 0x03, 0x46, 0x1c, 0x13, 0x56, 0x1e,
	0x03, 0x46, 0x0e, 0x13, 0xd1, 0x8b, 0x76, 0x11, 0x60, 0x89, 0x46, 0xfc, 0x89, 0x56, 0xfe, 0xb8,
	0x20, 0x00, 0xf7, 0xe6, 0x8b, 0x5e, 0x0b, 0x03, 0xc3, 0x48, 0xf7, 0xf3, 0x01, 0x46, 0xfc, 0x11,
	0x4e, 0xfe, 0x61, 0xbf, 0x00, 0x07, 0xe8, 0x28, 0x01, 0x72, 0x3e, 0x38, 0x2d, 0x74, 0x17, 0x60,
	0xb1, 0x0b, 0xbe, 0xd8, 0x7d, 0xf3, 0xa6, 0x61, 0x74, 0x3d, 0x4e, 0x74, 0x09, 0x83, 0xc7, 0x20,
	0x3b, 0xfb, 0x72, 0xe7, 0xeb, 0xdd, 0xfe, 0x0e, 0xd8, 0x7d, 0x7b, 0xa7, 0xbe, 0x7f, 0x7d, 0xac,
	0x98, 0x03, 0xf0, 0xac, 0x98, 0x40, 0x74, 0x0c, 0x48, 0x74, 0x13, 0xb4, 0x0e, 0xbb, 0x07, 0x00,
	0xcd, 0x10, 0xeb, 0xef, 0xbe, 0x82, 0x7d, 0xeb, 0xe6, 0xbe, 0x80, 0x7d, 0xeb, 0xe1, 0xcd, 0x16,
	0x5e, 0x1f, 0x66, 0x8f, 0x04, 0xcd, 0x19, 0xbe, 0x81, 0x7d, 0x8b, 0x7d, 0x1a, 0x8d, 0x45, 0xfe,
	0x8a, 0x4e, 0x0d, 0xf7, 0xe1, 0x03, 0x46, 0xfc, 0x13, 0x56, 0xfe, 0xb1, 0x04, 0xe8, 0xc2, 0x00,
	0x72, 0xd7, 0xea, 0x00, 0x02, 0x70, 0x00, 0x52, 0x50, 0x06, 0x53, 0x6a, 0x01, 0x6a, 0x10, 0x91,
	0x8b, 0x46, 0x18, 0xa2, 0x26, 0x05, 0x96, 0x92, 0x33, 0xd2, 0xf7, 0xf6, 0x91, 0xf7, 0xf6, 0x42,
	0x87, 0xca, 0xf7, 0x76, 0x1a, 0x8a, 0xf2, 0x8a, 0xe8, 0xc0, 0xcc, 0x02, 0x0a, 0xcc, 0xb8, 0x01,
	0x02, 0x80, 0x7e, 0x02, 0x0e, 0x75, 0x04, 0xb4, 0x42, 0x8b, 0xf4, 0x8a, 0x56, 0x24, 0xcd, 0x13,
	0x61, 0x61, 0x72, 0x0a, 0x40, 0x75, 0x01, 0x42, 0x03, 0x5e, 0x0b, 0x49, 0x75, 0x77, 0xc3, 0x03,
	0x18, 0x01, 0x27, 0x0d, 0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x20, 0x64, 0x69, 0x73, 0x6b, 0xff, 0x0d, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x20,
	0x49, 0x2f, 0x4f, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xff, 0x0d, 0x0a, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x2c, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x79,
	0x20, 0x6b, 0x65, 0x79, 0x0d, 0x0a, 0x00, 0x00, 0x49, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x53, 0x59, 0x53, 0x4d, 0x53, 0x44, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x7f, 0x01,
	0x00, 0x41, 0xbb, 0x00, 0x07, 0x60, 0x66, 0x6a, 0x00, 0xe9, 0x3b, 0xff, 0x00, 0x00, 0x55, 0xaa,
};
	
#pragma pack(1)
typedef struct _ABS_PACKET
{
	DWORD	StartNo;
	WORD	Count;
	WORD 	Offset;
	WORD 	Segment;
} ABS_PACKET,*PABS_PACKET;
#pragma pack()

BOOL __thiscall CAntiVirEngine::_Read_25(DWORD disk, DWORD ssec, DWORD nsec, BYTE *buffer)
{
#ifdef WINCE
	return 0;
#else
	LARGE_INTEGER	SectorNo64;
	char		hd[0x80];
	DWORD		nRead;
	int			iResult = 0;
	HANDLE		h;

	sprintf(hd,"\\\\.\\%c:", disk+'A'); 
	h = CreateFile(hd, GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_WRITE,0,OPEN_EXISTING,0,0); 
	if (h == INVALID_HANDLE_VALUE)
		return false; 
	
	SectorNo64.QuadPart = ssec * 0x200;		// 逻辑读取的起始扇区是0
	SetFilePointer(h, SectorNo64.LowPart ,&SectorNo64.HighPart, FILE_BEGIN);
	iResult = ReadFile(h, buffer, nsec*0x200, &nRead, NULL);
	CloseHandle(h);

	return iResult;
#endif
}

//////////////////////////////////////////////////////////////////////////////
//  没有验证!
BOOL __thiscall CAntiVirEngine::_Write_26(DWORD disk, DWORD ssec, DWORD nsec, BYTE *buffer)
{
#ifdef WINCE
	return 0;
#else
	LARGE_INTEGER	SectorNo64;
	char		hd[0x80];
	DWORD		nRead;
	int			iResult = 0;
	HANDLE		h;

	sprintf(hd,"\\\\.\\%c:", disk+'A'); 
	h = CreateFile(hd, GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE,0,OPEN_EXISTING,0,0); 
	if (h == INVALID_HANDLE_VALUE)
		return false; 
	
	SectorNo64.QuadPart = ssec * 0x200;		// 逻辑读取的起始扇区是0
	SetFilePointer(h, SectorNo64.LowPart ,&SectorNo64.HighPart, FILE_BEGIN);
	iResult = ReadFile(h, buffer, nsec*0x200, &nRead, NULL);
	CloseHandle(h);

	return iResult;
#endif
}

//////////////////////////////////////////////////////////////////////////////
//
BOOL __thiscall CAntiVirEngine::_Write_13(DWORD disk, DWORD _cx, DWORD _dh, DWORD _al, BYTE *buffer)
{
#ifdef WINCE
	return 0;
#else
	LARGE_INTEGER	SectorNo64;
	DWORD		nRead, nsectors, track;
	HANDLE		h;
	char		hd[0x80];
	int			iResult = 0;


	if (disk < 0x80)
		sprintf(hd,"\\\\.\\%c:", disk+'A'); 
	else
		sprintf(hd,"\\\\.\\PhysicalDrive%d", disk-0x80); 

	h = CreateFile(hd, GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE,0,OPEN_EXISTING,0,0); 
	if (h == INVALID_HANDLE_VALUE)
		return false; 

	track = ((_cx >> 8) & 0xFF)+((_cx & 0xc0) << 2);
	nsectors = (_cx&0x3f) + _dh*Disk_Max_CX + track*Disk_Max_CX*Disk_Max_DH;

	SectorNo64.QuadPart = (nsectors-1) * 0x200;		// 起始扇区是1
	SetFilePointer(h, SectorNo64.LowPart ,&SectorNo64.HighPart, FILE_BEGIN);
	iResult = WriteFile(h, buffer, _al*0x200, &nRead, NULL);
	CloseHandle(h);

	return iResult;
#endif
}

BOOL __thiscall CAntiVirEngine::_Read_13(DWORD disk, DWORD _cx, DWORD _dh, DWORD _al, BYTE *buffer)
{
#ifdef WINCE
	return 0;
#else
	LARGE_INTEGER	SectorNo64;
	DWORD		nRead, nsectors, track;
	HANDLE		h;
	char		hd[0x80];
	int			iResult;

	if (disk < 0x80)
		sprintf(hd,"\\\\.\\%c:", disk+'A'); 
	else
		sprintf(hd,"\\\\.\\PhysicalDrive%d", disk-0x80); 

	h = CreateFileA(hd, GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_WRITE,0,OPEN_EXISTING,0,0); 
	if (h == INVALID_HANDLE_VALUE)
		return false; 

	track = ((_cx >> 8) & 0xFF)+((_cx & 0xc0) << 2);
	nsectors = (_cx&0x3f) + _dh*Disk_Max_CX + track*Disk_Max_CX*Disk_Max_DH;

	SectorNo64.QuadPart = (nsectors-1) * 0x200;		// 起始扇区是1
	SetFilePointer(h, SectorNo64.LowPart ,&SectorNo64.HighPart, FILE_BEGIN);
	iResult = ReadFile(h, buffer, _al*0x200, &nRead, NULL);
	CloseHandle(h);

	return iResult;
#endif
}

/*
// 函数功能：匹配缓冲内是否存在串
BOOL MemStr(char* str, BYTE *p, int Len)
{
    for (int i = 0;i < Len - 6; i ++) 
	{
#ifndef WINCE
		if (*(p+i) == str[0] && memicmp(str, p+i, strlen(str)) == 0)
        	return true;
#endif
    }
    return false;
}
*/


BOOL FileExists(const char *szFileName)
{
	FILE *h;
	if ((h = fopen(szFileName, "rb")) == NULL)
		return false;
	fclose(h);
	return true;
}

PBYTE __thiscall CAntiVirEngine::Get_Sector_Image(DWORD type)
{
	PBYTE	rp = NULL;
	int i;
    
	// MBR process ...
	if (type == ST_DISK10) 
	{ 		
	    for (i = 0; i < 4; i ++) 
		{
			if (GetDWord(&B_Header[i*0x10 + 0x1BE + 8 ]) > 0x3f0000)
            	return MbrNew;	// big disk over 8G
	    }
		return Mbr;
	}

	// default = MSDOS6.22
	rp = Boot_DOS5;

	// Boot Record process ...
	// 首先是NTLDR或者WINBOOT.SYS？然后再检查检查是MSDOS还是IBMDOS？
	FILE *fp;
	char name[80];
	
	sprintf(name, "%c:\\NTLDR", Drive[0]+'A');
	if (FileExists(name))
	{
		rp = Boot_NT;
	}
	
	sprintf(name, "%c:\\WINBOOT.SYS", Drive[0]+'A');
	if (FileExists(name))
	{
		rp = Boot_Win4;
	}
	
	sprintf(name, "%c:\\COMMAND.COM", Drive[0]+'A');
	if ((fp = fopen(name,"rb")) != NULL) 
	{
		// Select boot record based on Command.com version?
		// WinMe	= 93442 (gb)
		// Win98SE 7.1	= 94292 (gb)
		// Win98	= 94282 (big5)
		// Win95OSR
		// Win95        = 92870 (eng)
		// MSDOS6.22	= 54645
		// MSDOS6
		// MSDOS5
		// MSDOS4
		// MSDOS3.30A	= 25308

		int CommandLen;
		fseek(fp,0,2);
		CommandLen = ftell(fp);
		fclose(fp);

		if (CommandLen >= 93000)
			rp = Boot_Win41;
		else if (CommandLen >= 92000)
			rp = Boot_Win4;
		else if (CommandLen <= 25308+80)
			rp = Boot_DOS3;
		else if (CommandLen <= 54645+80)
			rp = Boot_DOS5;
	}

	sprintf(name, "%c:\\IBMBIO.COM", Drive[0]+'A');
	if (FileExists(name))
	{
		// 替换IO.SYS为IBMBIO.COM
		for (i=0x200; i>0; i--)
		{
			if (memcmp(rp+i, "IO      SYS", 11) == 0)
			{
				memcpy(rp+i, "IBMBIO  COM", 11);
				i -= 10;
			}
			if (memcmp(rp+i, "MSDOS   SYS", 11) == 0)
			{
				memcpy(rp+i, "IBMDOS  COM", 11);
				i -= 10;
			}
		}
	}
	else {
		// 替换IBMBIO.COM为IO.SYS
		for (i=0x200; i>0; i--)
		{
			if (memcmp(rp+i, "IBMBIO  COM", 11) == 0)
			{
				memcpy(rp+i, "IO      SYS", 11);
				i -= 10;
			}
			if (memcmp(rp+i, "IBMDOS  COM", 11) == 0)
			{
				memcpy(rp+i, "MSDOS   SYS", 11);
				i -= 10;
			}
		}
	}

	if (GetDWord(rp+0x36) == '1TAF')
	{
		//struct diskfree_t df;
		unsigned long totalkb = 0;
     
		//if ( !_dos_getdiskfree(0, &df) )
		//	totalkb = (DWORD)df.total_clusters / 2 * (DWORD)df.sectors_per_cluster;
		* (rp + 0x3a) =  (totalkb < 32l*1024l) ? '2':'6';

		if (Drive[0] < 2)
		{
			// floppy
			* (WORD*)(B_Header + 0x1e) = 0;
			* (DWORD*)(B_Header + 0x20) = 0;
			* (WORD*)(B_Header + 0x24) = 0;
		}
	}
    
	return rp;
}

#endif // NO_DISKIO				  